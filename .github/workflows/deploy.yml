name: Build & Deploy Azure Kubernetes

on:
  push:
    branches:
      - pre-develop
      - develop
      # - main

jobs:

  # ✅ BUILD & PUSH IMAGE
  build-azure:
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:dind
        options: --privileged

    env:
      APP_PREFIX: ${{ secrets.APP_PREFIX }}
      CI_PIPELINE_ID: ${{ github.run_number }}
      CI_COMMIT_BRANCH: ${{ github.ref_name }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup branch env variables
        run: |
          if [ "$CI_COMMIT_BRANCH" == "pre-develop" ]; then
            echo "ACR_PROD=${{ secrets.ACR_STAGING }}" >> $GITHUB_ENV
            echo "SV_APP_ID_PROD=${{ secrets.SV_APP_ID_STAGING }}" >> $GITHUB_ENV
            echo "SV_PASSWORD_PROD=${{ secrets.SV_PASSWORD_STAGING }}" >> $GITHUB_ENV
            echo "SV_TENANT_ID_PROD=${{ secrets.SV_TENANT_ID_STAGING }}" >> $GITHUB_ENV
            echo "AZ_STORAGE_PROD=${{ secrets.AZ_STORAGE_STAGING }}" >> $GITHUB_ENV
          fi
          if [ "$CI_COMMIT_BRANCH" == "develop" ]; then
            echo "ACR_PROD=${{ secrets.ACR_QA }}" >> $GITHUB_ENV
            echo "SV_APP_ID_PROD=${{ secrets.SV_APP_ID_QA }}" >> $GITHUB_ENV
            echo "SV_PASSWORD_PROD=${{ secrets.SV_PASSWORD_QA }}" >> $GITHUB_ENV
            echo "SV_TENANT_ID_PROD=${{ secrets.SV_TENANT_ID_QA }}" >> $GITHUB_ENV
            echo "AZ_STORAGE_PROD=${{ secrets.AZ_STORAGE_QA }}" >> $GITHUB_ENV
          fi
          if [ "$CI_COMMIT_BRANCH" == "main" ]; then
            echo "ACR_PROD=${{ secrets.ACR_PROD }}" >> $GITHUB_ENV
            echo "SV_APP_ID_PROD=${{ secrets.SV_APP_ID_PROD }}" >> $GITHUB_ENV
            echo "SV_PASSWORD_PROD=${{ secrets.SV_PASSWORD_PROD }}" >> $GITHUB_ENV
            echo "SV_TENANT_ID_PROD=${{ secrets.SV_TENANT_ID_PROD }}" >> $GITHUB_ENV
            echo "AZ_STORAGE_PROD=${{ secrets.AZ_STORAGE_PROD }}" >> $GITHUB_ENV
          fi

      - name: Docker login
        run: echo $SV_PASSWORD_PROD | docker login $ACR_PROD -u $SV_APP_ID_PROD --password-stdin

      - name: Build image
        run: |
          docker build \
            -t $ACR_PROD/$APP_PREFIX:latest \
            -t $ACR_PROD/$APP_PREFIX:$CI_PIPELINE_ID \
            . \
            --build-arg SV_APP_ID=$SV_APP_ID_PROD \
            --build-arg SV_PASSWORD=$SV_PASSWORD_PROD \
            --build-arg SV_TENANT_ID=$SV_TENANT_ID_PROD \
            --build-arg AZ_STORAGE="$AZ_STORAGE_PROD"

      - name: Push docker image
        run: |
          docker push $ACR_PROD/$APP_PREFIX:$CI_PIPELINE_ID
          docker push $ACR_PROD/$APP_PREFIX:latest

  # ✅ DEPLOY TO AKS ON SUCCESS
  deploy-to-kubernetes:
    needs: build-azure
    runs-on: ubuntu-latest
    env:
      APP_PREFIX: ${{ secrets.APP_PREFIX }}
      CI_COMMIT_BRANCH: ${{ github.ref_name }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup branch env variables
        run: |
          if [ "$CI_COMMIT_BRANCH" == "pre-develop" ]; then
            echo "SV_APP_ID_PROD=${{ secrets.SV_APP_ID_STAGING }}" >> $GITHUB_ENV
            echo "SV_PASSWORD_PROD=${{ secrets.SV_PASSWORD_STAGING }}" >> $GITHUB_ENV
            echo "SV_TENANT_ID_PROD=${{ secrets.SV_TENANT_ID_STAGING }}" >> $GITHUB_ENV
            echo "AZ_KUB_NAME_PROD=${{ secrets.AZ_KUB_NAME_STAGING }}" >> $GITHUB_ENV
            echo "AZ_RG_PROD=${{ secrets.AZ_RG_STAGING }}" >> $GITHUB_ENV
          fi
          if [ "$CI_COMMIT_BRANCH" == "develop" ]; then
            echo "SV_APP_ID_PROD=${{ secrets.SV_APP_ID_QA }}" >> $GITHUB_ENV
            echo "SV_PASSWORD_PROD=${{ secrets.SV_PASSWORD_QA }}" >> $GITHUB_ENV
            echo "SV_TENANT_ID_PROD=${{ secrets.SV_TENANT_ID_QA }}" >> $GITHUB_ENV
            echo "AZ_KUB_NAME_PROD=${{ secrets.AZ_KUB_NAME_QA }}" >> $GITHUB_ENV
            echo "AZ_RG_PROD=${{ secrets.AZ_RG_QA }}" >> $GITHUB_ENV
          fi
          if [ "$CI_COMMIT_BRANCH" == "main" ]; then
            echo "SV_APP_ID_PROD=${{ secrets.SV_APP_ID_PROD }}" >> $GITHUB_ENV
            echo "SV_PASSWORD_PROD=${{ secrets.SV_PASSWORD_PROD }}" >> $GITHUB_ENV
            echo "SV_TENANT_ID_PROD=${{ secrets.SV_TENANT_ID_PROD }}" >> $GITHUB_ENV
            echo "AZ_KUB_NAME_PROD=${{ secrets.AZ_KUB_NAME_PROD }}" >> $GITHUB_ENV
            echo "AZ_RG_PROD=${{ secrets.AZ_RG_PROD }}" >> $GITHUB_ENV
          fi

      - name: Azure CLI Login Manual
        uses: azure/cli@v2
        with:
          inlineScript: |
            # 1. LOGIN
            az login --service-principal --username "${{ env.SV_APP_ID_PROD }}" --password "${{ env.SV_PASSWORD_PROD }}" --tenant "${{ env.SV_TENANT_ID_PROD }}"
            az account set --subscription "${{ secrets.SV_SUBSCRIPTION_ID }}"

            # 2. AKS CONFIG (genera el kubeconfig dentro del contenedor)
            # Nota: Necesitas que el AZ CLI tenga las variables AZ_RG_PROD y AZ_KUB_NAME_PROD
            az aks get-credentials -g $AZ_RG_PROD -n $AZ_KUB_NAME_PROD --overwrite-existing --admin
            
            # 3. HELM INSTALL (ejecutado dentro del contenedor)
            curl -L https://get.helm.sh/helm-v3.13.1-linux-amd64.tar.gz -o helm.tar.gz
            tar -xvf helm.tar.gz
            # Mueve el binario de Helm al PATH dentro del contenedor
            mv linux-amd64/helm /usr/local/bin
            rm -rf linux-amd64 helm.tar.gz

            # 4. HELM DEPLOY (ejecutado dentro del contenedor)
            helm upgrade --install $APP_PREFIX ./charts/$APP_PREFIX-0.1.0.tgz
            # El kubectl también está disponible dentro del contenedor
            kubectl delete pod -l app.kubernetes.io/instance=$APP_PREFIX || true
